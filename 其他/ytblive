configuration = args.shortcutParameter
await runloop(makeEvents, await main(configuration))

async function main(configuration) {
  let webView = new WebView()
  let theme = getTheme(configuration)
  reload(webView, theme)
  let exit = webView.present()
  let url = configuration.url
  let streams = await getStreams(url)
  let stream = await injectQualityControl(webView, streams, configuration.hd)
  await injectVideo(webView, stream)  
  await handleStreamType(webView, stream)
  await handleAutoPipIfNeeded(configuration, webView)
  await handleCompletionShortcutIfNeeded(configuration, webView)
  return { exit, stream, webView }
}

function compare(a, b) {
    if (a === b) {
       return 0;
    }

    var a_components = a.split(".");
    var b_components = b.split(".");

    var len = Math.min(a_components.length, b_components.length);
    for (var i = 0; i < len; i++) {
        if (parseInt(a_components[i]) > parseInt(b_components[i])) {
            return 1;
        }

        if (parseInt(a_components[i]) < parseInt(b_components[i])) {
            return -1;
        }
    }
    if (a_components.length > b_components.length) {
        return 1;
    }

    if (a_components.length < b_components.length) {
        return -1;
    }
    return 0;
}

function getTheme(configuration) {
  var theme = configuration.theme.toLocaleLowerCase()
  if (theme === null || theme.length === 0) {
    theme = Device.isUsingDarkAppearance() ? "ocean-next" : "polar" 
  }
  if (theme === "ocean-next") {
    return `
        --background-color:#343d46;
        --text-color: white;
        --border-color: #343d46;
        --button-background-color: #65737e;
        --button-active-color: #4f5b66;
    `
  } else if (theme === "polar") {
    return `
        --background-color:#f9fafb;
        --text-color: #3B4252;
        --border-color: #bbc5d8;
        --button-background-color: #E5E9F0;
        --button-active-color: #D8DEE9;
    `    
  } else {
    //fallback to nord
    return `
        --background-color:#3B4252;
        --text-color: white;
        --border-color: #2E3440;
        --button-background-color: #4c566a;
        --button-active-color: #2E3440;
    `
  }
}

async function handleAutoPipIfNeeded(configuration, webView) {
  if (configuration.pip === true) {
      webView.evaluateJavaScript(`video.webkitSetPresentationMode("picture-in-picture")`)
  }
}

async function handleCompletionShortcutIfNeeded(configuration, webView) {
  let completion = configuration.completion
  if (completion && completion.length > 0) {
    await webView.evaluateJavaScript(`setTimeout(() => { completion(null) }, 1000)`, true)
    Safari.open(`shortcuts://run-shortcut?name=${encodeURI(completion)}`) 
  }
}

async function handleStreamType(webView, stream) {  
  if (stream == null) {
    await webView.evaluateJavaScript(`document.getElementById("loadingContainer").innerHTML = "<h1>Unable to load stream</h1>"`)
  } else if (stream.type === "live") {
    await webView.evaluateJavaScript(`document.getElementById("controls").innerHTML = "<h1>Showing live video</h1>"`)
  } else if (stream.type === "upcoming") {
    await webView.evaluateJavaScript(`document.getElementById("controls").innerHTML = "<h1>Upcoming video. Check back later</h1>"`)
  }
  await webView.evaluateJavaScript(`document.getElementById("controls").style.display = "block"`)
}

function makeEvents(configuration) {  
  return [
    configuration.exit.then(() => {
      return {
        name: "exit",
        terminates: true
      }
    }),
    configuration.webView.evaluateJavaScript(injectEvents(), true).then((event) => {
      if (event === null) { return {} }
      if (event === "skipBackward") {
        return {
          name: event,
          action: () => { handleSkip(-10, configuration.webView) }
        }
      } else if (event === "skipForward") {
        return {
          name: event,
          action: () => { handleSkip(10, configuration.webView) }
        }
      } else if (event.startsWith("adjustPlayback")) {
        let rate = event.match("adjustPlayback(.*)")[1]
        return {
          name: event,
          action: () => { handlePlayback(rate, configuration.webView, configuration.stream) }
        } 
      } else if (event.startsWith("adjustQuality")) {
        let id = event.match("adjustQuality(.*)")[1]
        return {
          name: event,
          action: () => { handleQuality(id, configuration.webView) }
        }
      } else {
        console.log("Unknown event " + event)
      }
    })
  ]
}

async function runloop(makeEvents, configuration) { 
  while (await handle(makeEvents(configuration))) {}
  configuration.webView.loadHTML("")
  Script.complete()
}

async function handle(events) {
  return await Promise.race(events).then(async (event) => {
      if (event === undefined) { return false }
      console.log("handling event " + event.name)
      if (event.action) { await event.action() }
      return !(event.terminates) ?? true
   })
}

async function reload(webView, theme) {
   await webView.loadHTML(getHTML(theme))
}

async function injectQualityControl(webView, streams, prefersHD) {
  if (streams.length == 0) { return null }
  var stream
  if (prefersHD) {
    stream = streams[0]
  } else {
    stream = streams[streams.length - 1]
  }
  let buttons = streams.map((stream, index) => {
    var cls = "button1 qualityButton"
    if (index === 0 && prefersHD || index === streams.length - 1 && !prefersHD) {
      cls += " active"
    }
    return `<div class='${cls}' id='${stream.id}' data-src='${stream.url}' onclick='adjustQuality(this)'>${stream.name}</div>`
  }).join("")
  let javaScript = `document.getElementById("qualityContainer").innerHTML = "${buttons}"`
  await webView.evaluateJavaScript(javaScript)
  return stream
}

async function injectVideo(webView, stream) {
  if (stream == null) { return }
  if (stream.type === "upcoming") {
    let javaScript = `
       document.getElementById("loadingContainer").style.display = "none"
      document.getElementById("container").style.display = "block"
      document.getElementById("videoContainer").innerHTML = "<img src='${stream.thumbnail}'></img>"
    `
    await webView.evaluateJavaScript(javaScript)
  } else {
    let javaScript = `
      document.getElementById("loadingContainer").style.display = "none"
      document.getElementById("container").style.display = "block"
      document.getElementById("videoContainer").innerHTML = "<video id='video' controls='controls' class='video-stream' x-webkit-airplay='allow' autoplay playsinline src='${stream.url}'></video>"
    `
    await webView.evaluateJavaScript(javaScript)
    await webView.evaluateJavaScript(getPlayJS(), true)
  }
}

async function handleSkip(time, webView) {
  let javaScript = `
    video.currentTime = video.currentTime + ${time}
  `
  await webView.evaluateJavaScript(javaScript)
}

async function handlePlayback(playbackRate, webView, stream) {
  if (stream.type !== "video") { return Promise.resolve(null) }
  console.log("adjusting playback " + playbackRate)
  let javaScript = `
    video.playbackRate = ${playbackRate}
  `
  await webView.evaluateJavaScript(javaScript)
}

async function handleQuality(id, webView) {
   let javaScript = `
    rate = video.playbackRate
    currentTime = video.currentTime
    video.src = document.getElementById("${id}").getAttribute("data-src")
    video.onloadedmetadata = function() {
      video.onloadedmetadata = null
      video.currentTime = currentTime
      completion(null)      
    }
    video.playbackRate = rate
  `
  await webView.evaluateJavaScript(javaScript, true)
}

async function getStreams(url) {
  var videoId = getParameterByName("v", url)
  if (videoId === null) {
    let parts = url.split("/")
    videoId = parts[parts.length - 1]
  }
  let request = new Request(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=detailpage`)
  let encoded = await request.loadString()
  let decoded = decodeURIComponent(encoded)
  let response = decoded.split("&").filter((line) => { return line.startsWith("player_response") })[0].split(/player_response=(.+)/)[1]
  let info = JSON.parse(response)
  let videoDetails = info["videoDetails"]
  if (videoDetails["isUpcoming"]) {
    let thumbnails = videoDetails["thumbnail"]["thumbnails"]
    let thumbnail = thumbnails[thumbnails.length - 1].url
    return [{
      id: "upcoming",
      name: "Upcoming",
      type: "upcoming",
      thumbnail: thumbnail
    }]
  } else {
    return await getFormatStreams(info, videoId)
  }
}

async function getFormatStreams(info, videoId) {
  if (info === undefined) { return [] }
  let streamingData = info["streamingData"]
  if (streamingData === undefined) { return [] }
  let streams = (streamingData["formats"] ?? []).sort((stream1, stream2) => { return stream1.height < stream2.height })
  let hls = streamingData["hlsManifestUrl"]
  let hasStreams = streams !== undefined && streams.length > 0
  let isRegular = hasStreams && streams[0].url !== undefined
  let isLive = hls !== undefined
  let hasSignatureCipher = hasStreams && streams[0].signatureCipher !== undefined
  if (isRegular) {
    console.log("Video stream is regular")
    return streams
      .map((stream) => {
        return {
          url: stream.url,
          id: stream.itag.toString(),
          name: stream.qualityLabel,
          type: "video"
        }
      }
    )
  } else if (isLive) {
    console.log("Video stream is live")
    return [{
      url: hls,
      id: "live",
      name: "Live",
      type: "live"
    }]
  } else if (hasSignatureCipher) {
    console.log("Video stream has signature cipher")
    let js = await getYouTubeJavascript(videoId)
    let transform_plan = get_transform_plan(js)
    let variable = transform_plan[0].split(".")[0]
    let transform_functions = get_transform_functions(js, variable)  
    return getCipheredStreams(streams, transform_functions, transform_plan)     
  } else {
    console.log("Unable to find video stream")
    return []
  }
}

async function getCipheredStreams(streams, transform_functions, transform_plan) {
  var cipheredStream = []
  for (stream of streams) {
    let signatureCipher = stream.signatureCipher
    let signature = decodeURIComponent(signatureCipher.match(/s=(.*?)&/)[1])
    let url = decodeURIComponent(signatureCipher.match(/url=(.*?)$/)[1])
    let cipher = await get_cipher(signature, transform_functions, transform_plan)
    let streamUrl = `${url}&sig=${cipher}`
    cipheredStream.push({
      url: streamUrl,
      id: stream.itag.toString(),
      name: stream.qualityLabel,
      type: "video"
    })
  }

  return cipheredStream
}

async function getYouTubeJavascript(videoId) {
  let url = `https://youtube.com/watch?v=${videoId}`
  let request = new Request(url)
  let html = await request.loadString()
  let pattern = /"PLAYER_JS_URL":"(.*?)"/
  let match = html.match(pattern)
  console.log(match)
  if (match !== null && match.length > 1) {
    let query = match[1].replaceAll("\\", "")
    let jsUrl = `https://youtube.com${query}`
              console.log(jsUrl)
    let jsRequest = new Request(jsUrl)
    return await jsRequest.loadString()
  }
  
  return null
}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function getPlayJS() {
  return `
    let video = document.getElementsByTagName("video")[0]
    video.onplay = function() {
      video.onplay = null
      completion(null)
    }
    null
  `
}

function injectEvents() {
  return `
     function skipBackward() {
      let btn = document.getElementById("skipbackwardbutton")
      btn.className += " active"
      setTimeout(_ => {
        btn.className = btn.className.replace(" active", "")
      }, 300)
      completion("skipBackward") 
    }
    function skipForward() {
      let btn = document.getElementById("skipforwardbutton")
      btn.className += " active"
      setTimeout(_ => {
        btn.className = btn.className.replace(" active", "")
      }, 300)
      completion("skipForward") 
    }
    function adjustPlaybackSpeed(btn) {
      var btns = document.getElementsByClassName("speedbutton")
      for (var i = 0; i < btns.length; i++) {
        btns[i].className = btns[i].className.replace(" active", "")
      }
      btn.className += " active"
      completion("adjustPlayback" + btn.getAttribute("data-value")) 
    }
    function adjustQuality(btn) {
      var btns = document.getElementsByClassName("qualitybutton")
      for (var i = 0; i < btns.length; i++) {
        btns[i].className = btns[i].className.replace(" active", "")
      }
      btn.className += " active"
      completion("adjustQuality" + btn.id)
    }
    null
  `
}

function getHTML(theme) {  
  return `
    <html>
    <meta name="viewport" content="width=device-width, user-scalable=no" />
    <style>
    :root {  
      ${theme}
    }
    body {
      background-color: var(--background-color);;
    }
    .text {
      font-family: -apple-system;
      color: var(--text-color)
      display: block;
      text-align: center;
    }     
    #container {
      display: none;
      align-items: center;
      justify-content: center;
      height: 100%;
      width: 100%;
    }
    #loadingContainer {
      display: flex;
      width: 100%;
      height: 100%;
      align-items: center;
      justify-content: center;
    }
    .buttonContainer {
      width:100%;
      height:40px;
      line-height:40px;
      display: table;
    }
    .videoContainer {
      width: 100%;
    }
    #controls {
      display: none;
    }
    .button1{
      border-style: solid;
      border-width: 0.05em;
      border-color: var(--border-color);
      font-family: -apple-system;
      font-weight: 450;
      background: var(--button-background-color);
      color: var(--text-color);
      padding: 5px 10px;
      text-align: center;
      display: table-cell;
      transition: 0.3s;
    }
    .active {
      background: var(--button-active-color);
    }
    .focus {
      background: var(--button-active-color);
    }
    h1 {
      font-family: -apple-system;
      font-size: 20;
      font-weight: 450;
      color: var(--text-color);
      text-align: center;
    }
    img {
      width: 100% !important;
      height: auto !important;
    }
    video {
      width: 100% !important;
      height: auto !important;
    }
    </style>
    <body>
    <div id="loadingContainer">
      <h1>Loading your video. Stay tuned...</h1>
    </div>
    <div id="container">
      <div id="videoContainer">
      </div>
      <p>
      <div id="controls">
       <div class="buttonContainer">
      <br>
      <div class="buttonContainer" id="qualityContainer"/></div>
    </body>
    </html>
  `
}

async function get_cipher(signature, transform_functions, transform_plan) {
  let webView = new WebView()
  await webView.evaluateJavaScript(transform_functions)
  for (js_func of transform_plan) {  
    let func = parse_function(js_func)
    signature = await get_transform_signature(webView, func, signature)
  }
  return signature
}

async function get_transform_signature(webView, func, signature) {
  return await webView.evaluateJavaScript(`var a="${signature}".split("");${func.name}(a, ${func.argument});a.join("");`)
}

function get_transform_plan(js) {
  let name = get_initial_function_name(js)
  if (name == null) { return [] }
  let transforms = js.match(name + "=function\\(\\w\\){[a-z=\\.\\(\"\\)]*;(.*);(?:.+)}")
  if (transforms !== null && transforms.length > 1) {
    return transforms[1].split(";")  
  }
  return []
}

function get_transform_functions(js, variable) {
  let transform_object = get_transform_object(js, variable)
  return transform_object.map(object => {
    let split = object.split(":")
    let name = split[0]
    let func = split[1]
    return `let ${name}=${func}`
  }).join(";") + ";"
}

function get_transform_object(js, variable) {
  let pattern = "var " + variable + "={(.*?)};"
  return new RegExp(pattern, "s").exec(js)[1].replaceAll("\n", " ").split(", ")
}

function parse_function(js_func) {
  let pattern = /\w+\.(\w+)\(\w,(\d+)\)/
  let match = js_func.match(pattern)
  return {
    name: match[1],
    argument: match[2]
  }
}

function get_initial_function_name(js) {
  let pattern = /(?:\b|[^a-zA-Z0-9$])(?<sig>[a-zA-Z0-9$]{2})\s*=\s*function\(\s*a\s*\)\s*{\s*a\s*=\s*a\.split\(\s*""\s*\)/
  let match = js.match(pattern)
  if (match !== null && match.length > 1) {
    return match[1]
  } else {
    return null
  }
}
